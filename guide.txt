##Pre-requisites##
run mongod server
create postgres database
https://www.gitignore.io/
postman
Install eclipse STS
Create "Spring Starter Project"

##Project##
AppName DemoWeb
	Add Spring Web Module
	Add Thymeleaf
	Add PostgreSQL Driver (install Postgresql, create db)
	Add Spring DataMongoDB (install mongodb, run mongod)
	Add Devtool	
Create next project structure
src/main/java
	 com.example  
		DemoWebApplication.java
		#AppConfig.java @Configuration @Bean#
			#productDiscList() @Bean @Primary#
			#productMSIList() @Bean#
		#TextoPropertiesConfig.properties @Configuration @PropertySources#
		#McvConfig.java implements WebMvcConfigurer @Configuration #
			#addResourceHandler() @override#
	com.example.model
		Customer.java	@Document(collection = "customers")  @GeneratedValue @Column ~@Entity @Table~
			customerId @Id ~@Id @GeneratedValue~
			name #@NotEmpty @Size#
			#createAt @Column @Temporal @DateTmeFormat @PrePersist#
			#Photo#~@OnetoOne @JoinColumn~
			~bills: List<Bill> @OneToMany~
			~addBill()~
		Product.java  @Entity @Table @Id  @Column 
			#Product() constructor#
			#Product() constructor parameters#
			productId	@Id @GeneratedValue
			name
			price
			offerType					
			~createAt @Column @Temporal @DateTmeFormat @PrePersist~
		#Offer.java       @Component @Autowired @Qualifier  #
			#productOfferList #
			#intit()	 @PostConstruct#
			#destroy() @PreDestroy#
		#Photo#
			#photoId#
			#title#
			#image#~@JsonInclude() @Transient~
			~createAt @Column @Temporal @DateTmeFormat @PrePersist~
		~Bill.java @Entity @Table~
			~billId @Id @GeneratedValue~
			~description~
			~comments~
			~createAt createAt @Column @Temporal @DateTmeFormat @PrePersist~
			~customer @ManyToOne~
			~List<car> @OneToMany @JoinColumn~
			~addCar()~
			~totalAmount()~
		~Car.java~
			~carId @Id @GeneratedValue~
			~quantity~
			~producto @ManyToOne @JoinColumn~
			~createAt createAt @Column @Temporal @DateTmeFormat @PrePersist~
			~calculateAmount()~
	com.example.repository
		ICostumerRepo.java - extends MongoRepository
		IProductRepo.java  - extends JpaRepository		
	com.example.controller
		CustomerController.java - @Controller @RequestMapping @Autowired @Value
			#createCustomerForm()	-@GetMapping#
			#createCustomerForm()	-@PostMapping @Valid #
			#view() 	-	@GetMapping @PathVariable#
			addCustomer() - @PostMapping @ResponseBody @RequestBody 
			editCustomer() - @PutMapping @ResponseBody @RequestBody 
			deleteCustomer() - @DeleteMapping @ResponseBody @PathVariable
			#deleteCustomer() - @GetMapping#
			getAllCustomers()- @GetMapping
			#getAllJsons() @GetMapping @ResponseBody#
		ProductController.java  - @Controller @ResponseBody(opcional) @RequestMapping    @Autowired    @Value
			addProduct()   	    @RequestMapping post @RequestParam
			getAllProducts()    @RequestMapping get
		#OfferController.java	@Controller @RequestMapping @Autowired #
			#availableOffers()			@GetMapping#

src/main/resources
	static
		css 
		javascript
	templates 
		#layout	#
			#layout.html#
		customer.html
		products.html
		#customerForm.html#
		#view.html#
	application.properties
	#messages.properties#	
#uploads#
	#image.png#		 
	
	
##application.properties##
server.port=4041


		
##Local MongoDB config ##
spring.data.mongodb.database=customer_db
spring.data.mongodb.port=27017
spring.data.mongodb.host=localhost

##postgres config##
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost/demo3
spring.datasource.username=postgres
spring.datasource.password=123
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
 

spring.main.allow-bean-definition-overriding=true

spring.servlet.multipart.max-file-size=256MB
spring.servlet.multipart.max-request-size=256MB
spring.servlet.multipart.enabled=true


##Extra##
Basic->offers->delete/form->view/layoutsS-> foto

https://www.baeldung.com/spring-boot-mongodb-upload-file
https://spring.io/blog/2013/05/11/content-negotiation-using-spring-mvc

##Common Erros##
Main calss not found SpringBootApplication
ZipException: invalid LOC header
NoClassDefFoundError
NoClassDefFoundException
Solution: eliminate .m2 folder

##Annotations##
@ModelAttribute sirve para popular dropbox, checkbox, radiobutton en cualquier ruta del controlador que tenga la variable

##How to pass data to the view##
 Map<String, Object> map,Model model, ModelMap map, ModelAndVeiw mv

##LVL 2##
Spring Security
heroku

# JPA #
OneToOne: 
Approch1: Undirectional: you can insert in Table 2 no metter if there is not Table 1 PK created first
		-Add in  Entity 1 an object type Entity 2 
		-Add in  Entity 2 an object type Entity 1 
		-In Entity 1 add @OneToOne MappedBy and refer object created in Entiy 2
		-In Entity 2 add @JoinColumn and set FK name or refer PK Entity 2 name in order to avoid create new fk(mirroring)
Approach: Bidireccional: you cannot insert in Table 2 if there is not Table 1 PK created first
		-Add in  Entity 1 an object type Entity 2 
		-Add in  Entity 2 an object type Entity 1 
		-In Entity 1 add @OneToOne MappedBy and refer object created in Entiy 2
		-In Enity 2 add @OneToOne @MapsId 
		

@JoinColumn could be used in both sides but is rare in OneToMany side, indicates that this entity is the owner
mappedBy  OneToMany 
 